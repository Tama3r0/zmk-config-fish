// キーマップを更新する方法は https://o24.works/fish/guide を参照
// 視覚的に編集するには https://o24.works/fish/editor を参照


// 定義を呼んでくる
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

// US とJISの違いを定義しておく
#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角
// 特殊入力の挙動を調整できる

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <225>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <150>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <200>;
};


/ {

    // 複数キーの同時押しに特別の入力を設定できる
    // キー番号早見表：
    //       0  1  2  3     4  5  6  7
    // 8  9 10 11 12 13    14 15 16 17 18 19
    //   20 21 22 23          24 25 26 27
    //            28 29    30 31

    combos {
        compatible = "zmk,combos";
        timeout-ms = <100>;
        require-prior-idle-ms = <150>;

        combo_reset_L {
            key-positions = <3 8 13>;
            bindings = <&bootloader>;
        };

        combo_lang2 {
            key-positions = <11 12>;
            bindings = <&kp LANG2>;
            layers = <0>;
        };

        combo_lang1 {
            key-positions = <15 16>;
            bindings = <&kp LANG1>;
            layers = <0>;
        };

        combo_comma {
            key-positions = <15 30>;
            bindings = <&kp COMMA>;
            layers = <0 1>;
        };

        combo_dot {
            key-positions = <16 30>;
            bindings = <&kp DOT>;
            layers = <0 1>;
        };
        combo_qmark {
            key-positions = <17 30>;
            bindings = <&kp QMARK>;
            layers = <0>;
        };

        combo_xmark {
            key-positions = <18 30>;
            bindings = <&kp EXCL>;
            layers = <0>;
        };

        combo_reset_R {
            key-positions = <4 14 19>;
            bindings = <&bootloader>;
        };

        combo_studio_unlock {
            key-positions = <20 21 22 23>;
            bindings = <&studio_unlock>;
        };

        combo_lbkt {
            key-positions = <3 29>;
            bindings = <&kp JP_LBRACKET>;
            layers = <0>;
        };

        combo_rbkt {
            key-positions = <4 30>;
            bindings = <&kp JP_RBRACKET>;
            layers = <0>;
        };

        combo_caret {
            key-positions = <6 15 17>;
            bindings = <&kp JP_CARET>;
            layers = <0>;
        };
        combo_wquort {
            key-positions = <5 6 30>;
            bindings =<&kp JP_DQUOTE>;
            layers = <0>;
    };
    

    // キーに入力を割り当てる
    // 型（&...）は https://zmk.dev/docs/behaviors/... を参照
    // キーコードは https://zmk.dev/docs/codes/... を参照

    keymap {
        compatible = "zmk,keymap";

        layer_keymap {
            bindings = <
                      &kp Q       &kp U       &kp Y       &kp MINUS            &kp M       &kp B       &kp N       &kp R       
&kp ESC   &kp I       &mt LGUI O  &mt LALT A  &mt LSHFT E &kp F                &kp J       &mt RSHFT S &mt RALT K  &mt RGUI T  &kp H       &kp P     
          &kp Z       &kp X       &kp C       &kp V                                         &kp L       &kp G       &kp D       &kp W
                                              &kp BSPC    &lt 2 SPACE           &lt 1 RET   &mt RCTRL TAB     
            >;
        };

        layer_math {
            bindings = <
                       &kp JP_EQUAL &kp JP_CARET    &kp JP_YEN     &kp HASH    &kp JP_PLUS     &kp N7  &kp N8 &kp N9
&kp LSHIFT  &kp SEMI   &kp JP_COLON &kp JP_LBRACKET &kp JP_RBRACKET   &kp PRCNT   &kp JP_ASTERISK &kp N4  &kp N5  &kp N6 &kp MINUS &kp FSLH
            &kp COMMA  &kp DOT      &kp FSLH        &kp JP_UNDERSCORE                             &kp N1  &kp N2  &kp N3 &kp N0     
                                                &kp DEL     &trans             &trans          &trans      
            >;
        };

        layer_navi {
            bindings = <
                        &none       &kp UP      &none       &none               &none       &kp F10     &kp F11     &kp F12 
&trans      &none       &kp LEFT    &kp DOWN    &kp RIGHT   &none               &kp F5      &kp F6      &kp F7      &kp F8  &kp F9 &none      
            &trans      &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3                              &kp F1      &kp F2      &kp F3  &kp F4      
                                                &kp BSPC      &trans            &trans      &trans      
            >;
        };
    };
};
};
